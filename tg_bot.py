from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    CallbackContext,
    filters,
)
from find_category import find_args, find_category
from func_sheets import get_data_from_sheets, save_data_to_file
from write_data import write_to_first_empty_row
from load_from_env import token
import time
from prepare_reply import prepare_reply
from delete_last_row import clear_last_filled_row

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_FOR_CATEGORY = 1


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start
async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "–•–æ—Ä–æ—à–æ, –ø—Ä–∏—Å—ã–ª–∞–π —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ üòä. –§–æ—Ä–º–∞—Ç: –°—É–º–º–∞, –ö–∞—Ç–µ–≥–æ—Ä–∏—è, –û–ø–∏—Å–∞–Ω–∏–µ"
    )


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /update
async def update(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text("–û–±–Ω–æ–≤–ª—è—é—Å—å!", parse_mode="HTML")
    data = get_data_from_sheets()
    save_data_to_file(data)
    await update.message.reply_text("–ì–æ—Ç–æ–≤—á–µ–Ω–∫–æ!", parse_mode="HTML")


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç == '–£–¥–∞–ª–∏' –∏–ª–∏ '—É–¥–∞–ª–∏'
async def delete_last_three_messages(update: Update, context: CallbackContext) -> None:
    chat_id = update.message.chat_id
    last_message_id = update.message.message_id  # ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

    deleted_count = 0  # –°—á–µ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    current_message_id = last_message_id  # –ù–∞—á–∏–Ω–∞–µ–º —Å –æ–¥–Ω–æ–≥–æ –º–µ–Ω—å—à–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ

    while deleted_count < 3:  # –ù–∞–º –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ç—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=current_message_id)
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {current_message_id} –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.")
            deleted_count += 1
        except Exception as e:
            # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–Ω–æ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ)
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID {current_message_id}: {e}")

        current_message_id -= 1  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def process_data(update: Update, context: CallbackContext) -> int:
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã
    start = time.time()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∏–º –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    user_message = update.message.text  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(user_message)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
    if user_message.lower() == "—É–¥–∞–ª–∏":
        clear_last_filled_row()
        await delete_last_three_messages(update, context)
        return ConversationHandler.END

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –±–æ—Ç–∞
    if len(user_message.split()) < 2 or not any(char.isdigit() for char in user_message):
        print("–°–æ–æ–±—â–µ–Ω–∏–µ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç).")
        return  # –ü—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏

    # –î–µ–ª–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏ –ø–æ–ª—É—á–∞–µ–º —Å—É–º–º—É, –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
    m_sum, m_cat, m_desc = find_args(user_message)

    if m_cat == "- –ù–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ":
        await update.message.reply_text(
            f"–•–æ–∑—è–∏–Ω, –Ω–µ –≤–∏–∂—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —É—Ç–æ—á–Ω–∏! ü•∫ "
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ context –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        context.user_data["m_sum"] = m_sum
        context.user_data["m_desc"] = m_desc
        return WAITING_FOR_CATEGORY
    else:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É
        write_to_first_empty_row(m_sum, m_cat, m_desc)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        reply_text = prepare_reply(m_sum, m_cat, m_desc)
        await update.message.reply_text(reply_text, parse_mode="HTML")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∏ –≤—ã–≤–æ–¥–∏–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        end = time.time()
        elapsed_time = end - start
        print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")
        return ConversationHandler.END


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def handle_category(update: Update, context: CallbackContext) -> int:
    message = update.message.text  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    m_cat = find_category(message)
    m_sum = context.user_data["m_sum"]
    m_desc = context.user_data["m_desc"]
    if m_cat == '- –ù–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ':
        await update.message.reply_text(
            f"–•–æ–∑—è–∏–Ω, –Ω–µ –≤–∏–∂—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —É—Ç–æ—á–Ω–∏! ü•∫ "
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ context –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        context.user_data["m_sum"] = m_sum
        context.user_data["m_desc"] = m_desc
        return WAITING_FOR_CATEGORY
    else:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
        write_to_first_empty_row(m_sum, m_cat, m_desc)

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∏ –≤—ã–≤–æ–¥–∏–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        reply_text = prepare_reply(m_sum, m_cat, m_desc)
        await update.message.reply_text(reply_text, parse_mode="HTML")

        return ConversationHandler.END


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (–Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏ –∏–ª–∏ –æ—Ç–º–µ–Ω—ã)
async def cancel(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω. üõë")
    return ConversationHandler.END


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main() -> None:
    # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç Application –∏ –ø–µ—Ä–µ–¥–∞–µ–º —Ç–æ–∫–µ–Ω
    application = Application.builder().token(token).build()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & ~filters.COMMAND, process_data)],
        states={
            WAITING_FOR_CATEGORY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_category)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("update", update))
    application.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()


if __name__ == "__main__":
    main()